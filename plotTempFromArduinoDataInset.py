#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 23 10:48:02 2015

@author: pointgrey
"""

#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 23 10:04:27 2015

@author: pointgrey
"""
'''
Takes the csv files generated by the ArduinoTempShiftLid.py script and plots
the temperature vs. time graphs
'''
import numpy as np
import matplotlib.pyplot as plt
import os
import fnmatch
import re
from datetime import datetime
from matplotlib import dates
import matplotlib.animation as animation
import sys
import time
from matplotlib import rcParams

dirname = '/home/pointgrey/ArduinoLogs/'
figSaveDir = '/home/pointgrey/imaging/'


skippedRows = 20
updateDelay = 10
skippedFooter = 0
bgColor = 'orange'

fnames=[1]
datatypes = [('tempData','<f1'),('ChamberHV','<f1'),('LidHV','<f1'),('LEDstate','<f1'),
            ('SetTemp','<f1'),('dateData','|S10'),('timeData','|S6')]
insetValue = True

try:
    if len(sys.argv)>1:
        fnames = sys.argv[1].split(',')
        if 'inset=True' in fnames:
            insetValue = True
            fnames.remove('inset=True')
        elif 'inset=False' in fnames:
            insetValue = False
            fnames.remove('inset=False')
        for i in range (0, len(fnames)):
            try:
                if 'updateDelay' in fnames[i]:
                    updateDelay = int(fnames[i].split('=')[1])
                    fnames.remove(fnames[i])
            except:
                pass
        for i in range (0, len(fnames)):
            try:
                if 'skippedRows' in fnames[i]:
                    skippedRows = int(fnames[i].split('=')[1])
                    fnames.remove(fnames[i])
            except:
                pass
        for i in range (0, len(fnames)):
            try:
                if 'skippedFooter' in fnames[i]:
                    skippedFooter = int(fnames[i].split('=')[1])
                    fnames.remove(fnames[i])
            except:
                pass
except:
    pass


print 'Inset = '+str(insetValue)
print 'updateDelay = '+str(updateDelay)+' seconds'
print 'skippedRows = '+str(skippedRows)
print 'skippedFooter = '+str(skippedFooter)

def natural_sort(l): 
    convert = lambda text: int(text) if text.isdigit() else text.lower() 
    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] 
    return sorted(l, key = alphanum_key)

def findCsv(dirlist):
    nTxt = []
    #    print "Procesing from: "+dirname
    for files in dirlist:
        if fnmatch.fnmatch(files, '*.csv'):
            nTxt.append(files)
    return natural_sort(nTxt)

def getData(fname, datatypes, skippedRows,skippedFooter):
    data = np.genfromtxt(fname, delimiter =';', dtype = datatypes, skip_header=skippedRows, skip_footer=skippedFooter)
    tempData = data['tempData']
    setTemp  = data['SetTemp']
    dateData = data['dateData']
    timeData = data['timeData']
    return tempData, setTemp, dateData, timeData

def plotTemp(dateTimeData, tempData, setTemp, dateData, inset=True):
    # position of the labels
    ax.set_xticks([dateTimeData[i] for i in range(0,len(dateTimeData)) if i%1630==0])
    ax.tick_params(axis='both', direction='out', top='off', right='off')
    # format of the labels
    hfmt = dates.DateFormatter('%H:%M')
    ax.xaxis.set_major_formatter(hfmt)
    fig.autofmt_xdate(rotation=45, ha='center')
    #---- set axes labels ----
    ax.set_ylabel('Temp', labelpad=2, fontsize=12)
    ax.set_xlabel('Time', labelpad=0, fontsize=12)
    ax.set_yticks([23,32])
    ax.set_yticklabels(['23'+degreeSymbol+'C', '32'+degreeSymbol+'C'])
    for tick in ax.yaxis.get_major_ticks():
        tick.label.set_fontsize(10) 
    #---- plot data ----
    ax.plot(dateTimeData, tempData, color="green", label="Recorded Temp")
    ax.plot(dateTimeData, setTemp, color="k", label="Set Temp", lw=1)
    #ax.fill_between(dateTimeData, setTemp, 0, facecolor='k', alpha=0.2, lw=0.5)
    #---- set axis limits ----
    ax.axis(xmin=dateTimeData[0], xmax=dateTimeData[-1], ymin=18, ymax=35)
    if inset == True:
        ax.plot([],[],color="w",label= "Current Temp: "+str(tempData[-1]))
        ax1 = fig.add_axes([0.84, 0.6, 0.15, 0.2])
        ax1.set_axis_bgcolor(bgColor)
        ax1.plot(dateTimeData[-10:], tempData[-10:], color="green", label="Recorded Temp")
        ax1.axis(xmin=dateTimeData[-10], xmax=dateTimeData[-1], ymin=np.min(tempData[-20:-1]),
                 ymax=np.max(tempData[-10:-1]))
        ax1.set_yticks([np.min(tempData[-10:-1])-0.5,np.max(tempData[-10:-1])+0.5])
        ax1.set_xticks([dateTimeData[-10], dateTimeData[-2]])
        hfmt1 = dates.DateFormatter('%M:%S')
        ax1.xaxis.set_major_formatter(hfmt1)
        for ytick in ax1.yaxis.get_major_ticks():
            ytick.label.set_fontsize(8) 
        for xtick in ax1.xaxis.get_major_ticks():
            xtick.label.set_fontsize(8) 
    legend = ax.legend(loc = 'upper left', fontsize = 'x-small')
    legend.draggable()
    for label in legend.get_lines():
        label.set_linewidth(4)
    plt.suptitle(dateData[0]+' - '+dateData[-1])
    
    
    
    
def animate(i):
    tempData = []
    for files in range(0, len(fnames)):
        fname = nCsv[-int(fnames[files])]
        if tempData==[]:
            tempData, setTemp, dateData, timeData = getData(fname, datatypes, skippedRows,skippedFooter)
        else:
            tempData1, setTemp1, dateData1, timeData1 = getData(fname, datatypes, skippedRows,skippedFooter)
            tempData = np.r_[tempData, tempData1]
            setTemp = np.r_[setTemp, setTemp1]
            dateData = np.r_[dateData, dateData1]
            timeData = np.r_[timeData, timeData1]
    dateTimeData = [datetime.strptime(dateData[j]+timeData[j],'%Y%m%d%H%M%S')
                for j in range(0, len(tempData))]
    ax.clear()
    plotTemp(dateTimeData, tempData, setTemp, dateData, inset=insetValue)


rcParams["savefig.directory"] = figSaveDir
#---- create figure and axe ----  
#from:    https://stackoverflow.com/questions/31700348/
fig = plt.figure(figsize=(15.35,2))
#ax=plt.subplot(111)
ax = fig.add_axes([0.045, 0.35, 0.95, 0.5])
#fig.tight_layout(h_pad=0)

os.chdir(dirname)
nCsv = findCsv(os.listdir('.'))
degreeSymbol =u'\N{DEGREE SIGN}'

for f in range(0,len(fnames)):
    print nCsv[-int(fnames[f])]
ani=animation.FuncAnimation(fig,animate, interval=updateDelay*1000)
plt.show()  















